Udemy MicroServices Course

=> launchSettings.json aþaðýdaki düzenlemeleri yaptýk.

    "FreeCourse.Services.Catalog": {
      "commandName": "Project",
      "dotnetRunMessages": "true",
        ==> "launchBrowser": false a set ettik neden? Uygulama ayaða kalktýðýnda tarayýcýda açýlmamasý için bu düzenlemeyi yaptýk.
      "launchBrowser": false,
      "launchUrl": "swagger",
        ==> "applicationUrl": "http://localhost:5011" => CatalogApi için bu porta set ettik.
      "applicationUrl": "http://localhost:5011",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }

=> Microservice de IIS ile ayaða kaldýrmýyoruz, Kestrel ile ayaða kaldýracaðýz. Birden çok service olduðu için kestrel seçilmelidir.

=> Catalog.API tarafýnda MongoDB kullanmak için "MongoDB.Driver" yükledik.

=> Shared Class Library oluþturduk. Response olarak tüm microservice lerde kullanýlacak olan modellerimizi ekledik. [ResponseDto<T>] [NoContent]

=> Dto nesneleri oluþturduk. Course Create-Update için Dto oluþturduk. Diðerleri için de oluþturmamýz gerekir. Kurs öðrenme amaçlý olduðu için tekrarlamamak adýna sadece course için oluþturuldu.

=> Catalog.API Automapper library ekledik.

=> Dockerize aþamasýnda localhost olarak bir tabire gerek yoktur. Uygulama Docker ile ayaða kalktýðýnda sanki canlýya almýþ gibi düþünebiliriz.

=> Options pattern nedir? Appsettings üzerinden aþaðýdaki gibi bir düzenleme yaptýk. Startup tarafýnda Configuration üzerinden appsettings ayarlarýna ulaþabiliriz. Ancak bunu yapmak yerine bu özellikleri bir class'a aktararak istediðimiz yerde kullanabiliriz. Buna options pattern denir.
    "DatabaseSettings": {
    "CourseCollectionName": "Courses",
    "CategoryCollectionName": "Categories",
    "ConnectionString": "mongodb://localhost:27017"
    "DatabaseName": "CatalogDb"
     },

=> MongoDB ile haberleþmek için MongoDB.Driver kullanýyoruz.