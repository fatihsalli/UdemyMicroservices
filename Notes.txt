Udemy MicroServices Course


-------------------------------------------------------------------------------------------------------------
=> CATALOG.API
=> launchSettings.json aþaðýdaki düzenlemeleri yaptýk.

    "FreeCourse.Services.Catalog": {
      "commandName": "Project",
      "dotnetRunMessages": "true",
        ==> "launchBrowser": false a set ettik neden? Uygulama ayaða kalktýðýnda tarayýcýda açýlmamasý için bu düzenlemeyi yaptýk.
      "launchBrowser": false,
      "launchUrl": "swagger",
        ==> "applicationUrl": "http://localhost:5011" => CatalogApi için bu porta set ettik.
      "applicationUrl": "http://localhost:5011",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }

=> Microservice de IIS ile ayaða kaldýrmýyoruz, Kestrel ile ayaða kaldýracaðýz. Birden çok service olduðu için kestrel seçilmelidir.

=> Catalog.API tarafýnda MongoDB kullanmak için "MongoDB.Driver" yükledik.

=> Shared Class Library oluþturduk. Response olarak tüm microservice lerde kullanýlacak olan modellerimizi ekledik. [ResponseDto<T>] [NoContent]

=> Dto nesneleri oluþturduk. Course Create-Update için Dto oluþturduk. Diðerleri için de oluþturmamýz gerekir. Kurs öðrenme amaçlý olduðu için tekrarlamamak adýna sadece course için oluþturuldu.

=> Catalog.API Automapper library ekledik.

=> Dockerize aþamasýnda localhost olarak bir tabire gerek yoktur. Uygulama Docker ile ayaða kalktýðýnda sanki canlýya almýþ gibi düþünebiliriz.

=> Options pattern nedir? Appsettings üzerinden aþaðýdaki gibi bir düzenleme yaptýk. Startup tarafýnda Configuration üzerinden appsettings ayarlarýna ulaþabiliriz. Ancak bunu yapmak yerine bu özellikleri bir class'a aktararak istediðimiz yerde kullanabiliriz. Buna options pattern denir.
    "DatabaseSettings": {
    "CourseCollectionName": "Courses",
    "CategoryCollectionName": "Categories",
    "ConnectionString": "mongodb://localhost:27017"
    "DatabaseName": "CatalogDb"
     },

=> MongoDB ile haberleþmek için MongoDB.Driver kullanýyoruz.

=> Course ve Catalog için servislerimizi oluþturduk. Ctor da MongoDB.Driver ile database i tanýmladýk. Bu önemli bir konuydu.

=> Catalog.API tarafýnda response koda göre dönebilmek için Shared klasörü içinde CustomBaseController oluþturduk. Bu Controller ýn ControllerBase'den miras alabilmesi için => sað týk - Edit Project File diyip frameworkü kendimiz manuel olarak ekledik.
  <ItemGroup>
    <FrameworkReference Include="Microsoft.AspNetCore.App">
    </FrameworkReference>
  </ItemGroup>

=> Course ve Catalog için controllerlarýmýzý oluþturduk. NLayer dersindeki gibi farklý bir durum deðil.

=> Portainer => Bilgisayarýmýzdaki imagelarýmýzý veya containerlarýmýzý yönetmemizi için bir arayüz saðlamaktadýr. Komut satýrýna gerek olmadan güzel bir arayüz saðlamaktadýr containerlarý yönetmek için. Docker yardýmýyla container olarak ayaða kaldýracaðýz.
    => https://docs.portainer.io/start/install/server/docker/linux sitesine girip Powershell de "docker volume create portainer_data" yazarak volume oluþturuyoruz.
    => "docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest" sonrasýnda bu komutu yazýyoruz.  
    => sonrasýnda "docker images" komutu ile oluþturduðumuz container'ý görebiliriz.
    => https://localhost:9443/ tarayýcýmýza yazarak gidiyoruz. Dikkat 9443 üstte yazdýðýmýz için deðiþiyor bu önceden 9000 miþ.
    

=> MongoDB'i container olarak ayaða kaldýrma
    => Portainer.io sitesi üzerinden Add Templates ile Mongoyu seçip çift týklýyoruz.
    => Ýsmini girip "Advanced options" ý açarak Port mapping-host kýsmýna containerdaki deðeri yapýþtýrýyoruz. Mapleme yaptýk.
    => sonrasýnda oluþturuyoruz.
    => sonrasýnda daha önce yüklediðimiz MongoDb Compass i açýyoruz.
    => "ConnectionString": "mongodb://localhost:27017" appsettings içerisindeki "mongodb://localhost:27017" portunu MongoDb Compass'e yazýyoruz.



=> appsettings.json database baðlantýlarý için aþaðýdaki düzenlemeleri tanýmladýk.
  "DatabaseSettings": {
    "CourseCollectionName": "Courses",
    "CategoryCollectionName": "Categories",
    "ConnectionString": "mongodb://localhost:27017"
    "DatabaseName": "CatalogDb"
  },
  "ConnectionString": "mongodb://localhost:27017" //Dockerize aþamasýnda bunu ezeceðiz."localhost" kýsmýna docker compose dosyasýndaki servisin ismi gelecek.

=> Bir hata aldým Route u belirtsek bile default olarak get olsa dahi [HttpGet] eklememiz gerekiyor. Yoksa Swagger doðru yüklenmiyor.

-------------------------------------------------------------------------------------------------------------

=> IDENTITYSERVER.API

=> IdentityServer küpüthanesini yüklüyoruz. Sýrasýyla;
    - https://github.com/IdentityServer/IdentityServer4.Templates adresine gidip
    - Install with: "dotnet new -i identityserver4.templates" bu kodu powershellde yazarak paketi yüklüyoruz.
    - Dosyamýzda "IdentityServer" adýnda bir klasör oluþturduk. Dosya yolunu alýp powershellde cd "path" olarak gidiyoruz.
    - https://github.com/IdentityServer/IdentityServer4.Templates adresinden "dotnet new is4aspid" templete'ini seçtik. 
    - Powershell içerisine "dotnet new is4aspid --name FreeCourse.IdentityServer" yazýyoruz. Devamýnda seed no dedik biz kendimiz migration yapacaðýz data göndermesin.
    - Ýþlem bittiðinde klasör içine dosyalar oluþacak. 
    - Proje solutionýmýza gelerek klasör oluþturuyoruz."IdentityServer" olarak. Sað týk ile existing project diyerek var olan projeyi ekliyoruz.






    

            

